// DIE's signature file
// Author: DosX; Telegram: @DosX_Plus
// Universal anti-debuggers detector for .NET/Native

function detect() {
    const checkRemoteDebuggerPresent = "CheckRemoteDebuggerPresent",
        isDebuggerPresent = "IsDebuggerPresent";

    if (PE.isNET()) {
        const detected = validateReferencesStr(
            isPositive = false,
            references = [
                // WinAPI
                checkRemoteDebuggerPresent,
                isDebuggerPresent,
            ]
        );

        if (detected != "") {
            antiDebuggerDetect(detected);
        } else {
            const debuggerObject = "Debugger", // MSIL: 'System.Diagnostics.Debugger' from System.Diagnostics.dll
                isAttached = "get_IsAttached", // MSIL: '*.Debugger::get_IsAttached()'
                isLogging = "IsLogging" // MSIL: '*.Debugger::IsLogging()'

            if (
                // .NET Functions
                (
                    PE.isNETStringPresent(debuggerObject) || PE.isNETUnicodeStringPresent(debuggerObject) // Check for 'Debugger'
                ) && (
                    (PE.isNETStringPresent(isAttached) || PE.isNETUnicodeStringPresent(isAttached)) || // Check for 'get_IsAttached' property
                    (PE.isNETStringPresent(isLogging) || PE.isNETUnicodeStringPresent(isLogging)) // Check for 'IsLogging' function
                )
            ) {
                antiDebuggerDetect("System.Diagnostics.Debugger");
            }
        }
    } else {
        const kLib = "kernel32";

        const detected = validateNativeImportsStr( // I hope this crutch will be fixed in the future'
            references = [
                [kLib + ".dll", checkRemoteDebuggerPresent],
                [kLib + ".dll", isDebuggerPresent],
                [kLib, checkRemoteDebuggerPresent],
                [kLib, isDebuggerPresent],
            ]
        );

        if (PE.isHeuristicScan() && (detected != "")) {
            antiDebuggerDetect(detected);
        }
    }
}

function antiDebuggerDetect(options) {
    _setResult("protection", "Anti-Debugger", "", options);
}

function validateNativeImportsStr(references) { // references[2]
    for (var i = 0; i < references.length; i++) {
        var importSign = references[i],
            library = importSign[0],
            entry = importSign[1];


        if (PE.isLibraryFunctionPresent(library, entry)) {
            return entry;
        } else if (PE.findSignature(0, PE.getSize(), "'" + entry + "'00") != -1) {
            return "sign: " + entry;
        }
    }
    return "";
}

function validateReferencesStr(isPositive, references) {
    for (var i = 0; i < references.length; i++) {
        var currentReference = references[i],
            sign = "00'" + currentReference + "'00";

        for (var x = 0; x < PE.getNumberOfSections() - 1; x++) {
            const section = x;
            if (isPositive) {
                if (!PE.isSignatureInSectionPresent(section, sign)) {
                    return currentReference;
                }
            } else {
                // negative
                if (PE.isSignatureInSectionPresent(section, sign)) {
                    return currentReference;
                }
            }
        }

    }
    return "";
}

// Do you really need to read this text? How about go outside and relax?