// DIE's signature file

init("compiler","MASM32");

function isMASM32()
{
    bResult=0;

    var nOffset=PE.nEP;
    var nTemp;
    var nSize=128;

    while(nSize>0)
    {
        nTemp=PE.findByte(nOffset,nSize,0xE8)
        if(nTemp==-1)
        {
             break;
        }

        if(PE.compare("E8$$$$$$$$FF25",nTemp))
        {
            return 1;
        }

        nSize-=(nTemp-nOffset-1);
        nOffset=nTemp+1;
    }

    return bResult;
}

function getMASM32Version()
{
    var sResult="";

    if(PE.isRichVersionPresent(8078)&&PE.isRichVersionPresent(8444))
    {
        sResult="8-11"; // Original MASM32 from http://masm32.com 8444  (ml.exe 6.14.8444) 8078 (link.exe 5.12.8078)
    }
    else if(PE.isRichVersionPresent(30319))
    {
        sResult="10.00.30319";
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nNumberOfRichIDs=PE.getNumberOfRichIDs();

    if((nNumberOfRichIDs>0)&&(nNumberOfRichIDs<=3)) // Usually MASM compilled GUI exes have 3 IDs: link.exe, ml.exe andr cvtres.exe, DLLs and consoles have 2 IDs: link.exe and ml.exe
    {
        bDetected=1;
    }

    if(bDetected)
    {
        sVersion=getMASM32Version();
    }

    /* if(!bDetected) // Some packers/protectors have MASM code on entrypoint
    {
        if(isMASM32())
        {
            sOptions="EP stub";
            bDetected=1;
        }
    } */ // False positives :(

    return result(bShowType,bShowVersion,bShowOptions);
}
