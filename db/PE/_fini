if (_isResultPresent("packer", "AHpacker") && _isResultPresent("packer", "ExE Pack")) {
    _removeResult("packer", "AHpacker");
}

if (_isResultPresent("linker", "Microsoft linker") && _isResultPresent("linker", "Turbo linker")) {
    _removeResult("linker", "Turbo linker");
}

if (_isResultPresent("tool", "Microsoft Visual Studio") && _isResultPresent("tool", "Borland Delphi")) {
    _removeResult("tool", "Borland Delphi");
}

if (_isResultPresent("packer", "Simple Pack") && _isResultPresent("compiler", "FASM")) {
    _removeResult("compiler", "FASM");
}		

if(PE.isNET()) {
    var nNumberOfDetects = 0;
    if(PE.isNETStringPresent("BabelObfuscatorAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("ZYXDNGuarder")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("DotfuscatorAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("YanoAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("Reactor")) {
        nNumberOfDetects++;
    }
    /* if(PE.isNETStringPresent("EMyPID_8234_")) {
        nNumberOfDetects++;
    } */
    if(PE.isNETStringPresent("ObfuscatedByAgileDotNetAttribute")) {
        nNumberOfDetects++;
    }    
    if(PE.isNETStringPresent("ObfuscatedByGoliath")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("CheckRuntime")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("ObfuscatedByCliSecureAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("____KILL")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("CodeWallTrialVersion")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("Sixxpack")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("Microsoft.VisualBasic")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("nsnet")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("ConfusedByAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("Macrobject.Obfuscator")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("CryptoObfuscator.ProtectedWithCryptoObfuscatorAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("Xenocode.Client.Attributes.AssemblyAttributes.ProcessedByXenocode")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("NineRays.Obfuscator.Evaluation")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("SecureTeam.Attributes.ObfuscatedByAgileDotNetAttribute")) {
        nNumberOfDetects++;
    }
    if(PE.isNETStringPresent("SmartAssembly.Attributes.PoweredByAttribute")) {
        nNumberOfDetects++;
    }

    if (nNumberOfDetects > 2) {
        _setResult("protection", "Fake signatures", "", "");
        if (!PE.isHeuristicScan()) {
            _removeResult("protector", "CodeWall");
            _removeResult("protector", "CliSecure");
            _removeResult("protector", "Confuser");
            _removeResult("protector", "Dotfuscator");
            _removeResult("protector", "Goliath");
            _removeResult("protector", "Babel .NET");
            _removeResult("protector", "Agile .NET");
            _removeResult("protector", "Yano");
            _removeResult("protector", "DNGuard");
            //_removeResult("protector", "KoiVM");
        }
    }
}
