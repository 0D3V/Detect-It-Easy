// DIE's signature file
// Author: DosX; Telegram: @DosX_Plus
// Yes, this is a universal detector of .NET packers and cryptors. It's easy to cheat, but it works flawlessly!!! :) I'm happy.

function detect(bShowType, bShowVersion, bShowOptions) {
    var isDetected = true,
        isCryptor = false,
        options = "";

    if (!PE.isNET()) return null; // Only .NET binaries supported...

    if (validateReferences(
            isPositive = true,
            references = [
                "Assembly", // MSIL: 'System.Reflection.Assembly' from System.Reflection.dll
                "Load", // MSIL: '*.Assembly::Load(uint8[])'
                "get_EntryPoint", // MSIL: '*.Assembly::get_EntryPoint()'
                "Invoke", // MSIL: '*.MethodBase::Invoke(object, object[])'
                "System.Reflection" // System.Reflection.dll
            ]
        )) {
        isDetected = false;
        return null; // end
    }

    if (findAndMark("System.Security.Cryptography", isFullName = false) != "") { // for cryptors
        const cryptoClasses = [
            "TripleDESCryptoServiceProvider",
            "RSACryptoServiceProvider",
            "DSACryptoServiceProvider",
            "DESCryptoServiceProvider",
            "AesCryptoServiceProvider",
            "Rfc2898DeriveBytes",
            "SHA256Managed",
            "TripleDES",
            "Rijndael",
            "ECDsaCng",
            "AesAEAD",
            "Aes192Cbc",
            "Aes256Cbc",
            "Aes128Cbc",
            "AesManaged",
            "AesCng",
            "SHA256",
            "SHA512",
            "SHA1CryptoServiceProvider",
            "SHA512CryptoServiceProvider",
            "RC2CryptoServiceProvider",
            "SHA384CryptoServiceProvider",
            // "MD5CryptoServiceProvider",
            "SHA256CryptoServiceProvider",
            "RNGCryptoServiceProvider"
        ];

        for (var i = 0; i < cryptoClasses.length; i++) {
            var cryptoClassSign = cryptoClasses[i],
                result = findAndMark(
                    sign = cryptoClassSign,
                    isFullName = true
                );

            if (result != "") {
                isCryptor = true;
                options = cryptoClassSign;
                break;
            }
        }
    }

    if ((findAndMark("System.IO.Compression", isFullName = false) != "")) {
        const compressionClasses = [
            "DeflateStream",
            "GZipStream"
        ];

        for (var i = 0; i < compressionClasses.length; i++) {
            var compressionClassSign = compressionClasses[i],
                result = findAndMark(compressionClassSign, isFullName = true);

            if (result != "") {

                if (isCryptor) {
                    options += " + " + compressionClassSign
                } else {
                    options = compressionClassSign;
                }

                break;
            }
        }
    }

    if (isDetected) {
        // var typeToOutput = (isCryptor ? "cryptor" : "packer");
        // _setResult(typeToOutput, "Packer detected!", "", options);

        _setResult("packer", (
            isCryptor ? "Cryptor" : "Packer"
        ) + " detected!", "", options)

        // btw cryptors are not labeled as a "cryptor" type just because they are
        // actually packers but with encryption. Therefore, it would be most logical
        // to designate it “packer” and notify about the presence of encryption.
    }
}

// "isFullName = true"  = 00'sign'00
// "isFullName = false" = 00'sign'
function findAndMark(sign, isFullName) {
    if (PE.isSignatureInSectionPresent(0,
            ("00'" + sign + "'") + // 00'string
            (isFullName ? "00" : ""))) { // ... '00
        return sign;
    }
    return "";
}

function validateReferences(isPositive, references) {
    for (var i = 0; i < references.length; i++) {
        var sign = "00'" + references[i] + "'00";
        if (isPositive) {
            if (!PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        } else { // negative
            if (PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        }
    }
    return false;
}

// I wanna a piece of pizza.