// DIE's signature file
// Author: DosX; Telegram: @DosX_Plus
// This smart analysis will help identify the presence of obfuscation through complex checks

function detect() {
    if (!PE.isNET()) return null; // Only .NET binaries supported...

    const isVbNet = PE.isNETStringPresent("Microsoft.VisualBasic");

    var options = "";

    var isEntryPointModified = false;
    if (!PE.isDll() && validateSignature("00'_CorExeMain'00")) {
        if (isVbNet) {
            if (!PE.isNETStringPresent("Main") &&
                !PE.isNETStringPresent("main") &&
                !PE.isNETStringPresent("MAIN")) {
                isEntryPointModified = true;
            }
        } else if (!PE.isNETStringPresent("Main")) {
            isEntryPointModified = true;
        }
    }

    if (isEntryPointModified) options += "Modified EP";


    var isNativeEntryPointModified = false;
    if (!PE.isDll()) {
        if (!PE.is64()) {
            // FF2500????00: jmp dword ptr [ ... ]
            if (!PE.compareEP("FF 25 ?? ?? ?? 00")) {
                isNativeEntryPointModified = true;
            }
            // } else { // AMD64
            //     if (!PE.compareEP("4D 5A 90")) {
            //         isNativeEntryPointModified = true;
            //     }
        }
    }

    if (isNativeEntryPointModified) options += (options != "" ? " + " : "") + "Modified native EP";


    if (PE.findSignature(PE.getDosStubOffset(), PE.getDosStubSize(), "'This program cannot be run in DOS mode.'") == -1) {
        options += (options != "" ? " + " : "") + "Modified DOS";
    }


    const badChars = '_-=+~!@#$%^&*()"â„–;%:?*():;,/\\|\'`<>.0123456789'; // Very very bad!

    var strangeSections = false;

    if (PE.getNumberOfSections() > 6 || !PE.isSectionNamePresent(".text")) {
        strangeSections = true;
    } else {
        for (var i = 0; i != PE.getNumberOfSections(); i++) {
            var sectionName = PE.getSectionName(i);
            if (sectionName[0] != "." && sectionName.length < 4) { // Checks if the first char is "." and length more than 4
                strangeSections = true;
                break;
            }

            for (var x = 1; x < sectionName.length; x++) { // Reads all chars after "."
                for (var d = 0; d < badChars.length; d++) {
                    if (sectionName[x] == badChars[d]) {
                        strangeSections = true;
                        break;
                    }
                }
            }
        }
    }

    if (strangeSections) options += (options != "" ? " + " : "") + "Strange sections";


    if (
        isAllNetReferencesPresent([
            "System.Reflection", // System.Reflection.dll
            "GetILGenerator", // MSIL: 'System.Reflection.Emit.DynamicMethod::GetILGenerator()'
            "BeginInvoke",
            "EndInvoke",
            "GetMethod", // MSIL: 'System.Type::GetMethod( ... )'
            "OpCode" // MSIL: 'System.Reflection.Emit.OpCode'
        ]) &&
        validateSignature("'Pointer'") // MSIL: 'System.Reflection.Pointer' // 'System.Type::get_IsPointer()' ... [etc] ...
    ) { options += (options != "" ? " + " : "") + "Virtualization"; }


    // https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.suppressildasmattribute
    if (PE.isNETStringPresent("SuppressIldasmAttribute")) {
        options += (options != "" ? " + " : "") + "Anti ILDASM";
    }


    const debuggerObject = "Debugger", // MSIL: 'System.Diagnostics.Debugger' from System.Diagnostics.dll
        isAttached = "get_IsAttached", // MSIL: '*.Debugger::get_IsAttached()'
        isLogging = "IsLogging" // MSIL: '*.Debugger::IsLogging()'

    if (
        ( // .NET Functions
            PE.isNETStringPresent(debuggerObject) || PE.isNETUnicodeStringPresent(debuggerObject) // Check for 'Debugger'
        ) && (
            (PE.isNETStringPresent(isAttached) || PE.isNETUnicodeStringPresent(isAttached)) || // Check for 'get_IsAttached' property
            (PE.isNETStringPresent(isLogging) || PE.isNETUnicodeStringPresent(isLogging)) // Check for 'IsLogging' function
        ) ||
        ( // Native (WinAPI) functions
            PE.isNETStringPresent("CheckRemoteDebuggerPresent") || PE.isNETStringPresent("IsDebuggerPresent")
        )
    ) { options += (options != "" ? " + " : "") + "Anti Debug"; }


    const calliOpCode = "29??000011"; // MSIL OPCODE: 'calli'

    if (validateSignature( // samples by: MindLated
            "FE06????000A" + // MSIL OPCODE: 'ldftn'
            calliOpCode
        ) ||
        validateSignature( // samples by: ArmDot
            "97" + // MSIL OPCODE: 'ldelem.i'
            calliOpCode
        )) { options += (options != "" ? " + " : "") + "Calli Invokes"; }


    if (validateSignature("'Obfuscated'") ||
        validateSignature("'obfuscated'") ||
        validateSignature("'ByAttribute'") ||
        validateSignature("'ObfuscatorAttribute'") ||
        PE.isNETStringPresent("ObfuscationAttribute")) { // System.Reflection.ObfuscationAttribute
        options += (options != "" ? " + " : "") + "Watermark";
    }


    if (options != "") {
        _setResult("protection", "Obfuscation", "", options);
    }
}

function validateSignature(sign) {
    return PE.findSignature(0x00, PE.getSize() - PE.getOverlaySize(), sign) != -1;
}

function isAllNetReferencesPresent(references) {
    for (var i = 0; i < references.length; i++) {
        var ref = references[i];
        if (!PE.isNETStringPresent(ref)) {
            return false;
        }
    }
    return true;
}

// Every time I start writing bad code I get hit with my head on the keybofewuihdsowefjfqodgsa79dowqhdsioefurogrwhuoguethuhofrwyi