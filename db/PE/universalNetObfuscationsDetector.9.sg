/*
  ██╗██╗      ███████╗███╗   ███╗ █████╗ ██████╗ ████████╗      ██╗██╗  
 ██╔╝╚██╗     ██╔════╝████╗ ████║██╔══██╗██╔══██╗╚══██╔══╝     ██╔╝╚██╗ 
██╔╝  ╚██╗    ███████╗██╔████╔██║███████║██████╔╝   ██║       ██╔╝  ╚██╗
╚██╗  ██╔╝    ╚════██║██║╚██╔╝██║██╔══██║██╔══██╗   ██║       ╚██╗  ██╔╝
 ╚██╗██╔╝     ███████║██║ ╚═╝ ██║██║  ██║██║  ██║   ██║        ╚██╗██╔╝ 
  ╚═╝╚═╝      ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝         ╚═╝╚═╝  
███████╗██╗ ██████╗ ███╗   ██╗ █████╗ ████████╗██╗   ██╗██████╗ ███████╗
██╔════╝██║██╔════╝ ████╗  ██║██╔══██╗╚══██╔══╝██║   ██║██╔══██╗██╔════╝
███████╗██║██║  ███╗██╔██╗ ██║███████║   ██║   ██║   ██║██████╔╝█████╗  
╚════██║██║██║   ██║██║╚██╗██║██╔══██║   ██║   ██║   ██║██╔══██╗██╔══╝  
███████║██║╚██████╔╝██║ ╚████║██║  ██║   ██║   ╚██████╔╝██║  ██║███████╗
╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝
*/

// DIE's signature file
// Author: DosX; Telegram: @DosX_Plus
// This smart analysis will help identify the presence of obfuscation through complex checks

function detect() {
    if (!PE.isNET()) return null; // Only .NET binaries supported...

    const isVbNet = PE.isNETStringPresent("Microsoft.VisualBasic");

    var options = "";

    var isEntryPointModified = false;
    if (!PE.isDll()) {
        if (isVbNet) {
            if (isAllNetReferencesMissing(
                    [
                        "Main",
                        "main",
                        "MAIN",
                        "MyApplication"
                    ]
                )) {
                isEntryPointModified = true;
            }
        } else if (isAllNetReferencesMissing(
                [
                    "Main",
                    "<Main>$" // For programs with top-level operators
                ]
            )) {
            isEntryPointModified = true;
        }
    }

    if (isEntryPointModified) options += "Modified EP";



    var isNativeEntryPointModified = false;
    if (!PE.isDll()) {
        if (!PE.is64()) {
            // FF2500????00: jmp dword ptr [ ... ]
            if (!PE.compareEP("FF 25 ?? ?? ?? 00")) {
                isNativeEntryPointModified = true;
            }
        } else { // AMD64
            if (PE.VAToOffset(PE.getAddressOfEntryPoint()) != 0x00) {
                isNativeEntryPointModified = true;
            }
        }
    }

    if (isNativeEntryPointModified) options += (options != "" ? " + " : "") + "Modified native EP";



    if (PE.findSignature(PE.getDosStubOffset(), PE.getDosStubSize(), "'This program cannot be run in DOS mode.'") == -1) {
        options += (options != "" ? " + " : "") + "Modified DOS";
    }



    const badChars = '_-=+~!@#$%^&*()"№;%:?*():;,/\\|\'`<>.0123456789'; // Very very bad!

    var strangeSections = false;

    if (PE.getNumberOfSections() > 6 || !PE.isSectionNamePresent(".text")) {
        strangeSections = true;
    } else {
        for (var i = 0; i != PE.getNumberOfSections(); i++) {
            var sectionName = PE.getSectionName(i);
            if (sectionName[0] != "." && sectionName.length < 3) { // Checks if the first char is "." and length more than 4
                strangeSections = true;
                break;
            }

            for (var x = 1; x < sectionName.length; x++) { // Reads all chars after "."
                for (var d = 0; d < badChars.length; d++) {
                    if (sectionName[x] == badChars[d]) {
                        strangeSections = true;
                        break;
                    }
                }
            }
        }
    }

    if (strangeSections) options += (options != "" ? " + " : "") + "Strange sections";



    if (
        isAllNetReferencesPresent([
            "System.Reflection", // System.Reflection.dll
            "GetILGenerator", // MSIL: 'System.Reflection.Emit.DynamicMethod::GetILGenerator()'
            "BeginInvoke",
            "EndInvoke",
            "OpCode" // MSIL: 'System.Reflection.Emit.OpCode'
        ]) &&
        (
            validateSignature("'Ldarg_0'") || // MSIL: 'System.Reflection.Emit.OpCodes.Ldarg_0'
            validateSignature("'CreateDelegate'") // MSIL: 'System.Delegate.CreateDelegate'
        )
    ) { options += (options != "" ? " + " : "") + "Virtualization"; }



    // https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.suppressildasmattribute
    if (
        PE.isNETStringPresent("SuppressIldasmAttribute")
    ) { options += (options != "" ? " + " : "") + "Anti ILDASM"; }



    // Anti de4dot via inheritance
    if (
        validateSignature("'Form'??????00'Form'??????00'Form'??????00") || // samples by: NetShield
        PE.isNETStringPresent("Form0") // samples by: MindLated
    ) { options += (options != "" ? " + " : "") + "Anti de4dot"; }



    const debuggerObject = "Debugger", // MSIL: 'System.Diagnostics.Debugger' from System.Diagnostics.dll
        isAttached = "get_IsAttached", // MSIL: '*.Debugger::get_IsAttached()'
        isLogging = "IsLogging" // MSIL: '*.Debugger::IsLogging()'

    if (
        ( // .NET Functions
            PE.isNETStringPresent(debuggerObject) || PE.isNETUnicodeStringPresent(debuggerObject) // Check for 'Debugger'
        ) && (
            (PE.isNETStringPresent(isAttached) || PE.isNETUnicodeStringPresent(isAttached)) || // Check for 'get_IsAttached' property
            (PE.isNETStringPresent(isLogging) || PE.isNETUnicodeStringPresent(isLogging)) // Check for 'IsLogging' function
        ) ||
        ( // Native (WinAPI) functions
            PE.isNETStringPresent("CheckRemoteDebuggerPresent") || PE.isNETStringPresent("IsDebuggerPresent")
        )
    ) { options += (options != "" ? " + " : "") + "Anti Debug"; }



    const calliOpCode = "29 ?? 00 00 11"; // MSIL OPCODE: 'calli'

    if (validateSignature( // samples by: MindLated
            "FE 06 ?? ?? 00 0A" + // MSIL OPCODE: 'ldftn'
            calliOpCode
        ) ||
        validateSignature( // samples by: ArmDot
            "97" + // MSIL OPCODE: 'ldelem.i'
            calliOpCode
        )) { options += (options != "" ? " + " : "") + "Calli Invokes"; }



    const obfuscatorsAttributes = [
        "ObfuscatedByAgileDotNetAttribute",
        "DotfuscatorAttribute",
        "ObfuscatedByGoliath",
        "ConfusedByAttribute",
        "BabelAttribute",
        "YanoAttribute",
        "ZYXDNGuarder",
        "PoweredByAttribute"
    ]
    var signaturesCounter = 0;
    for (var t = 0; t < obfuscatorsAttributes.length; t++) {
        if (PE.isNETStringPresent(obfuscatorsAttributes[t]))
            signaturesCounter++;

        if (signaturesCounter > 1)
            break;
    }
    if (signaturesCounter > 1) {
        options += (options != "" ? " + " : "") + "Fake signatures";
    } else {
        // "Watermark" is only possible in the absence of fake signatures
        if (signaturesCounter == 1 ||
            validateSignature("'Obfuscated'") ||
            validateSignature("'obfuscated'") ||
            validateSignature("'ByAttribute'") ||
            validateSignature("'ObfuscatorAttribute'") ||
            PE.isNETStringPresent("ObfuscationAttribute")) // System.Reflection.ObfuscationAttribute
        { options += (options != "" ? " + " : "") + "Watermark"; }
    }



    if (options != "") {
        _setResult("protection", "Obfuscation", "", options);
    }
}

function validateSignature(sign) {
    return PE.findSignature(0x00, PE.getSize() - PE.getOverlaySize(), sign) != -1;
}

function isAllNetReferencesMissing(references) {
    for (var i = 0; i < references.length; i++) {
        const ref = references[i];
        if (PE.isNETStringPresent(ref)) {
            return false;
        }
    }

    return true;
}

function isAllNetReferencesPresent(references) {
    for (var i = 0; i < references.length; i++) {
        const ref = references[i];
        if (!PE.isNETStringPresent(ref)) {
            return false;
        }
    }

    return true;
}

// Every time I start writing bad code I get hit with my head on the keybofewuihdsowefjfqodgsa79dowqhdsioefurogrwhuoguethuhofrwyi