var File=PE;

includeScript("result");


// Store the entry point file offset.
PE.nEP=PE.RVAToOffset(PE.getAddressOfEntryPoint());


// Locate the first library matching a pattern.
// Returns null if not found, otherwise an array:
//   [-1] is the index of the library;
//   [0] is the name of the library (lower cased);
//   [1] onwards are the captured subpatterns.

PE.isLibraryPresentExp = function(sLibraryPattern)
{
    var aMatch=null;
    for (var n=0;n<PE.getNumberOfImports();n++)
    {
        aMatch=PE.getImportLibraryName(n).match(sLibraryPattern);
        if(aMatch)
        {
            aMatch[-1]=n;
            aMatch[0]=PE.getImportLibraryName(n).toLowerCase();
            break;
        }
    }

    return aMatch;
}


// Create an array of sections.

PE.nLastSection=PE.getNumberOfSections()-1;

function Section(number, name, virtsize, rva, filesize, offset, characteristics)
{
    this.Number          = number;
    this.Name            = name;
    this.VirtualSize     = virtsize;
    this.VirtualAddress  = rva;
    this.FileSize        = filesize;
    this.FileOffset      = offset;
    this.Characteristics = characteristics;
}

PE.section=[];
for(var i=0;i<=PE.nLastSection;i++)
{
    PE.section[i] = new Section(i,
                                PE.getSectionName(i),
                                PE.getSectionVirtualSize(i),
                                PE.getSectionVirtualAddress(i),
                                PE.getSectionFileSize(i),
                                PE.getSectionFileOffset(i),
                                PE.getSectionCharacteristics(i));
    PE.section[PE.section[i].Name] = PE.section[i];
}

// Create dummy sections for the few files that need them.
PE.section[-1] = new Section(-1,"\0",0,0,0,PE.getSize(),0);
if(PE.nLastSection==-1)
{
    PE.section[0]=PE.section[-1];
}
