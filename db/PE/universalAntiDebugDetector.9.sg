// DIE's signature file
// Author: DosX; Telegram: @DosX_Plus
// Universal anti-debuggers detector for .NET/Native

function detect() {
    const checkRemoteDebuggerPresent = "CheckRemoteDebuggerPresent",
        isDebuggerPresent = "IsDebuggerPresent";

    if (PE.isNET()) {
        const detected = validateReferencesStr(
            isPositive = false,
            references = [ // WinAPI
                checkRemoteDebuggerPresent,
                isDebuggerPresent
            ]
        )

        if (detected != "") {
            antiDebuggerDetect(detected);
        } else {
            const debuggerObject = "Debugger",
                isAttached = "get_IsAttached";

            if (( // .NET Functions
                    PE.isNETStringPresent(debuggerObject) ||
                    PE.isNETUnicodeStringPresent(debuggerObject)
                ) && (
                    PE.isNETStringPresent(isAttached) ||
                    PE.isNETUnicodeStringPresent(isAttached)
                )) {
                antiDebuggerDetect("System.Diagnostics.Debugger");
            }
        }
    } else {
        const kLib = "kernel32";

        const detected = validateNativeImportsStr( // I hope this crutch will be fixed in the future'
            isPositive = false,
            references = [
                [kLib + ".dll", checkRemoteDebuggerPresent],
                [kLib + ".dll", isDebuggerPresent],
                [kLib, checkRemoteDebuggerPresent],
                [kLib, isDebuggerPresent],
            ]
        )

        if (detected != "") {
            antiDebuggerDetect(detected);
        }
    }
}

function antiDebuggerDetect(options) {
    _setResult("protection", "Anti-Debug detected!", "", options);
}

function validateNativeImportsStr(isPositive, references) { // references[2]
    for (var i = 0; i < references.length; i++) {
        var importSign = references[i],
            library = importSign[0],
            entry = importSign[1];
        if (isPositive == true) {
            if (!PE.isLibraryFunctionPresent(library, entry)) {
                return entry;
            }
        } else { // negative
            if (PE.isLibraryFunctionPresent(library, entry)) {
                return entry;
            }
        }
    }
    return "";
}

function validateReferencesStr(isPositive, references) {
    for (var i = 0; i < references.length; i++) {
        var currentReference = references[i],
            sign = "00'" + currentReference + "'00";
        if (isPositive) {
            if (!PE.isSignatureInSectionPresent(0, sign)) {
                return currentReference;
            }
        } else { // negative
            if (PE.isSignatureInSectionPresent(0, sign)) {
                return currentReference;
            }
        }
    }
    return "";
}

// Do you really need to read this text? How about go outside and relax?