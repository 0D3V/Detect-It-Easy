// DIE's signature file
// Author: LinXP

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=7)
    {
        if(Binary.compare("'UnityFS'00"))
        {
            init("format","UnityFS");
            var nFileVer      = Binary.readBEDword(0x8);
            var sEngineVer    = Binary.getString(0x12);
            var sMinPlayerVer = Binary.getString(0x0C);
            if (sEngineVer && sMinPlayerVer)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                sVersion=sVersion.append("MinPlayerVer:"+sMinPlayerVer);
                bDetected=1;
            }
        }
        else if(Binary.compare("'UnityRaw'00"))
        {
            init("format","UnityRaw");
            var nFileVer      = Binary.readBEDword(0x9);
            var sEngineVer    = Binary.getString(0x13);
            var sMinPlayerVer = Binary.getString(0x0D);
            if (sEngineVer && sMinPlayerVer)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                sVersion=sVersion.append("MinPlayerVer:"+sMinPlayerVer);
                bDetected=1;
            }
        }
        else  if(Binary.compare("'UnityWeb'00"))
        {
            init("format","UnityWeb");
            var nFileVer      = Binary.readBEDword(0x9);
            var sEngineVer    = Binary.getString(0x13);
            var sMinPlayerVer = Binary.getString(0x0D);
            if (sEngineVer && sMinPlayerVer)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                sVersion=sVersion.append("MinPlayerVer:"+sMinPlayerVer);
                bDetected=1;
            }
        }

        else if(Binary.readBEDword(0x10) == 0)
        {
            init("format","Unity Asset");
            var nFileVer=Binary.readBEDword(0x8);
            switch(nFileVer)
            {
                case   9: sEngineVer=Binary.getString(0x14);    break;
                case  15: sEngineVer=Binary.getString(0x14);    break;
                case  17: sEngineVer=Binary.getString(0x14);    break;
                case  20: sEngineVer=Binary.getString(0x14);    break;
                case  21: sEngineVer=Binary.getString(0x14);    break;
                case  22: sEngineVer=Binary.getString(0x30);    break;
            }
            if (sEngineVer && nFileVer <=22 && nFileVer >=8)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                bDetected=1;
            }
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
